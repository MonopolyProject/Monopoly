<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Board" xml:space="preserve">
    <value>Game Board</value>
  </data>
  <data name="buy" xml:space="preserve">
    <value>Buy</value>
  </data>
  <data name="chance" xml:space="preserve">
    <value>Chance</value>
  </data>
  <data name="Control" xml:space="preserve">
    <value>Controlled Roll</value>
  </data>
  <data name="endTurn" xml:space="preserve">
    <value>End Turn</value>
  </data>
  <data name="magProper" xml:space="preserve">
    <value>Manage</value>
  </data>
  <data name="p1Label" xml:space="preserve">
    <value>P1</value>
  </data>
  <data name="p2Label" xml:space="preserve">
    <value>P2</value>
  </data>
  <data name="payFine" xml:space="preserve">
    <value>Pay Fine</value>
  </data>
  <data name="roll" xml:space="preserve">
    <value>Roll</value>
  </data>
  <data name="incomeTax" xml:space="preserve">
    <value>Income Tax</value>
  </data>
  <data name="trade" xml:space="preserve">
    <value>Trade</value>
  </data>
  <data name="aGo" xml:space="preserve">
    <value>Advance to GO: Collect $200</value>
  </data>
  <data name="aIlli" xml:space="preserve">
    <value>Advance to Illinois Avenue, collect $200 if you pass GO</value>
  </data>
  <data name="aNear" xml:space="preserve">
    <value>Advance to nearest Utility. If owned, pay 10x rolled otherwise you may buy the property, collect $200 if you pass GO</value>
  </data>
  <data name="aRail" xml:space="preserve">
    <value>Advance to nearest Railroad. If owned, pay 2x rent otherwise you may buy the property, collect $200 if you pass GO</value>
  </data>
  <data name="assess" xml:space="preserve">
    <value>You are assessed for Street Repairs: pay $40/house and $115/hotel</value>
  </data>
  <data name="aSt" xml:space="preserve">
    <value>Advance to St. Charles Place, collect $200 if you pass GO</value>
  </data>
  <data name="bday" xml:space="preserve">
    <value>It's your birthday, each player pays you $10</value>
  </data>
  <data name="beau" xml:space="preserve">
    <value>Won second prize in Beauty Contest, collect $10</value>
  </data>
  <data name="Berror" xml:space="preserve">
    <value>Bank Error in your Favor: Collect $7</value>
  </data>
  <data name="bo" xml:space="preserve">
    <value>B&amp;&amp;ORailroad</value>
  </data>
  <data name="buyHouse" xml:space="preserve">
    <value>Buy House</value>
  </data>
  <data name="cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="chair" xml:space="preserve">
    <value>You've been elected Chariman of the board, pay each player $50</value>
  </data>
  <data name="communityChest" xml:space="preserve">
    <value>Community    Chest</value>
  </data>
  <data name="confirm" xml:space="preserve">
    <value>confirm</value>
  </data>
  <data name="consult" xml:space="preserve">
    <value>Receive $25 consultancy fee</value>
  </data>
  <data name="controlBoard" xml:space="preserve">
    <value>What number you want to roll</value>
  </data>
  <data name="cross" xml:space="preserve">
    <value>You won Crossword Competition, collect $100</value>
  </data>
  <data name="deselectAll" xml:space="preserve">
    <value>Deselect All</value>
  </data>
  <data name="divi" xml:space="preserve">
    <value>Bank pays you dividend of $50</value>
  </data>
  <data name="docF" xml:space="preserve">
    <value>Doctor's Fee: pay $50</value>
  </data>
  <data name="electricCompany" xml:space="preserve">
    <value>ElectricCompany</value>
  </data>
  <data name="enterPlayerName" xml:space="preserve">
    <value>Enter Player {0}'s Name</value>
  </data>
  <data name="fourPlayers" xml:space="preserve">
    <value>4 Players</value>
  </data>
  <data name="freeParking" xml:space="preserve">
    <value>FreeParking</value>
  </data>
  <data name="go" xml:space="preserve">
    <value>Go</value>
  </data>
  <data name="goJail" xml:space="preserve">
    <value>Go directly to Jail. Do not pass GO, do not collect $200</value>
  </data>
  <data name="holi" xml:space="preserve">
    <value>Holiday fund matures, collect $100</value>
  </data>
  <data name="hosp" xml:space="preserve">
    <value>Pay Hospital fees of $100</value>
  </data>
  <data name="illinoisAvenue" xml:space="preserve">
    <value>illinoisAvenue</value>
  </data>
  <data name="indianaAvenue" xml:space="preserve">
    <value>indianaAvenue</value>
  </data>
  <data name="inRe" xml:space="preserve">
    <value>Income Tax refund, collect $20</value>
  </data>
  <data name="Jail" xml:space="preserve">
    <value>Jail</value>
  </data>
  <data name="lifeIn" xml:space="preserve">
    <value>Life Insurance Matures, collect $100</value>
  </data>
  <data name="loan" xml:space="preserve">
    <value>Your building Loan Matures, collect $150</value>
  </data>
  <data name="marvinGardens" xml:space="preserve">
    <value>marvinGardens</value>
  </data>
  <data name="message1" xml:space="preserve">
    <value>You cannot add more than 1 hotel to a property.</value>
  </data>
  <data name="message2" xml:space="preserve">
    <value>is currently mortgaged. You cannot add houses to mortgaged properties</value>
  </data>
  <data name="message3_1" xml:space="preserve">
    <value>You do not own a monopoly with the color group associated with</value>
  </data>
  <data name="message3_2" xml:space="preserve">
    <value>. Houses can only be built on monopolies.</value>
  </data>
  <data name="message4" xml:space="preserve">
    <value>You must build evenly on mononpolies.</value>
  </data>
  <data name="message5" xml:space="preserve">
    <value>Success! The house has been built on</value>
  </data>
  <data name="morgage" xml:space="preserve">
    <value>Morgage</value>
  </data>
  <data name="newYorkAvenue" xml:space="preserve">
    <value>newYorkAvenue</value>
  </data>
  <data name="NumOfPlayers" xml:space="preserve">
    <value>How Many Players?</value>
  </data>
  <data name="opNight" xml:space="preserve">
    <value>Grand Opera Night, each player pays you $50</value>
  </data>
  <data name="outJ" xml:space="preserve">
    <value>Get out of jail free</value>
  </data>
  <data name="pennRailroad" xml:space="preserve">
    <value>PennsylvaniaRailroad</value>
  </data>
  <data name="player1Trade" xml:space="preserve">
    <value>player1: </value>
  </data>
  <data name="player2Trade" xml:space="preserve">
    <value>player2:</value>
  </data>
  <data name="poorTax" xml:space="preserve">
    <value>Pay poor tax of $15</value>
  </data>
  <data name="readingRailroad" xml:space="preserve">
    <value>ReadingRailroad</value>
  </data>
  <data name="repair" xml:space="preserve">
    <value>Make repairs on all properties, pay $25/house and $100/hotel</value>
  </data>
  <data name="schoolF" xml:space="preserve">
    <value>Pay school fees of $50</value>
  </data>
  <data name="selectAll" xml:space="preserve">
    <value>Select All</value>
  </data>
  <data name="selectPorperty" xml:space="preserve">
    <value>Select Properties.</value>
  </data>
  <data name="short" xml:space="preserve">
    <value>ShortLine</value>
  </data>
  <data name="statesAvenue" xml:space="preserve">
    <value>statesAvenue</value>
  </data>
  <data name="stock" xml:space="preserve">
    <value>Collect $50 from stock sales</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value />
  </data>
  <data name="tennesseeAvenue" xml:space="preserve">
    <value>tennesseeAvenue</value>
  </data>
  <data name="threePlayers" xml:space="preserve">
    <value>3 Players</value>
  </data>
  <data name="toJ" xml:space="preserve">
    <value>Go toJail</value>
  </data>
  <data name="toJail" xml:space="preserve">
    <value>Go to Jail. Do not pass GO, do not collect $200</value>
  </data>
  <data name="tradePrice" xml:space="preserve">
    <value>Enter the price you offer.</value>
  </data>
  <data name="tRead" xml:space="preserve">
    <value>Take a trip on the Reading Railroad, collect $200 if you pass GO</value>
  </data>
  <data name="twoPlayers" xml:space="preserve">
    <value>2 Players</value>
  </data>
  <data name="uncle" xml:space="preserve">
    <value>Distant Uncle passes away, inherit $100</value>
  </data>
  <data name="ventnorAvenue" xml:space="preserve">
    <value>ventnorAvenue</value>
  </data>
  <data name="virginiaAvenue" xml:space="preserve">
    <value>virginiaAvenue</value>
  </data>
  <data name="walk" xml:space="preserve">
    <value>Take a walk on Boardwalk</value>
  </data>
  <data name="waterWork" xml:space="preserve">
    <value>WaterWorks</value>
  </data>
  <data name="luxuryTax" xml:space="preserve">
    <value>Luxury Tax</value>
  </data>
</root>